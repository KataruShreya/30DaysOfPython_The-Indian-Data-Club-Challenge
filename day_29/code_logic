
1. We define a JSON file named events.json that contains a list of event objects.
   - Each event has keys like event_id, event_name, and available_slots.
   - This file serves as the database for all events.

2. In filehandler.py, we write functions to manage events and registrations:
   - load_events(): Loads all events from the JSON file.
   - is_event_available(event_id): Checks if the given event has any available slots.
   - reduce_event_slot(event_id): Decreases the available slot count by 1 for a registered event.
   - save_registration(name, email, age, event_id): Saves user registration data to registrations.csv.
   - get_all_registrations(): Reads and returns all registration records from the CSV file as dictionaries.

3. In model.py, we use Pydantic to create a data validation model called UserRegistration.
   - Fields include name, email_id, age, and event.
   - Constraints:
     - name must contain only alphabets.
     - email_id must be a valid email address.
     - age must be between 16 and 60.
     - event must not be empty.
   - Custom validators are used to enforce these rules.

4. In main.py, we set up FastAPI with three routes:
   - GET /events: Returns all available events.
   - POST /register: Accepts user registration data.
     - Validates input using the UserRegistration model.
     - Checks if the event exists and has slots.
     - If all checks pass, reduces the slot and saves the registration.
     - Returns a success message.
   - GET /registrations: Displays all user registrations stored in the CSV file.

5. The app ensures:
   - Clean data validation with user-friendly error messages.
   - Auto-creation of files if not present.
   - Slot availability is updated in real time.
   - Registration data is stored persistently and can be retrieved via an endpoint.
